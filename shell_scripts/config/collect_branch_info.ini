[repository]
# 仓库信息
# 本地仓库路径
local =
# 远程仓库地址
remote =
# 首次clone仓库时使用的分支,存在即可
initBranch =


[setting]
# 设置分支信息的区间范围, 只提取该区间内的log信息, 包括首次提交和最后第一提交信息
# 若区间内的log信息为空, 则不计入活跃分支
# 左开右闭区间 (sinceDate, untilDate]

# 起始日期(不包括), 若放空或者早于分支的创建日期,则使用分支创建日期(不同分支可不同), 格式:yyyy-mm-dd
sinceDate =

# 结束日期(包括), 放空表示今天, 格式:yyyy-mm-dd
untilDate =

# 结果输出日志文件绝对路径
outputResultFile =

# 输出结果时使用的日期格式, 默认 %Y%m%d, 如: 20220620
outputDateFormat = %Y%m%d

# 不进行统计的分支名,可多个, 逗号分隔, 如: master,dev
excludeBranch =

# 是否只统计 [srcBranchInfo] 中指定的分支
# 若为False,则统计所有分支(剔除excludeBranch), 而[srcBranchInfo]提供源分支信息, 用于获取分支的创建时间
onlyCollectSrcBranchInfo = True

# onlyCollectSrcBranchInfo=False时有效, 表示最多提取的最近有提交记录的前N个分支信息,正数有效
maxBranchCount = 0

[robot]
# 流程结束后用于发送给钉钉机器人的通知
# 机器人的access_token值,空白表示不通知
accessToken =

# 群聊机器人安全设置添加的关键词信息,会拼接在消息开头
keyWord =

# 需要@的人员手机号，可多个，逗号分隔
atPhone =

# 额外的信息,会拼接到keyword下方
extraInfo =


[srcBranchInfo]
# 待提取的分支名及其源分支名,支持多个,若放空,则提取所有分支信息(会剔除掉 {excludeBranch})
# 格式: 目标分支名=源分支名,目标分支创建日期(格式：yyyy-mm-dd)
# 如: developBranch=master,2022-01-01 表示 2022.01.01 从master分支checkout出的developBranch
# 若 '源分支名' 名为空,表示未知或者无源分支
# '源分支名' 信息一般需要开发人员主动记录
# '目标分支创建日期' 信息一般需要开发人员主动记录,格式：yyyy-mm-dd， 也表示首次提交日期
#   主要是用于部分单纯执行merge操作的分支， 如 release 分支, 通常是在dev上开发,然后何入release分支，release分支可能不会单独开发
#   此时，若要统计该release分支的创建时间， 通过 git log dev..release 可能就没有任何信息,因此需要增加自定义创建日期功能
#   若该属性为空,则尝试通过 git log srcBranch..targetBranch 来确认targetBranch的创建日期
# 补充:
# 获取分支创建日期: git reflog show --date=iso , 该方要求: 在远程仓库创建新分支的同时clone到本地, 日期才准确, reflog依赖于本地git记录
# 获取分支最早一次提交信息: git log branchA..branchB  其中: branchA checkout 出了 branchB